import tkinter as tk
from tkinter import simpledialog, messagebox, ttk
import random
import os
import datetime
#Created by Arshed ameen
# Custom mapping from characters to numbers
mapping_string = "ABCP67890QRSTUmnopVWXYdHIJKLefghijklqrstuvwxyz!@#$%^&*()_'-/;=?[`{|+~><:<,.}]12345EDFGMNOZabc"

# Create a dictionary that maps each character to a unique number
encryption_map = {char: str(index + 1).zfill(2) for index, char in enumerate(mapping_string)}
reverse_encryption_map = {value: key for key, value in encryption_map.items()}

# Encrypt the password
def encrypt_password(password, random_number):
    encrypted_values = []
    for char in password:
        if char in encryption_map:
            encrypted_value = int(encryption_map[char]) - random_number
            encrypted_values.append(str(encrypted_value).zfill(2))
    return ''.join(encrypted_values) + str(random_number)

# Decrypt the password
def decrypt_password(encrypted_password):
    random_number = int(encrypted_password[-1])
    encrypted_values = encrypted_password[:-1]
    decrypted_password = []
    for i in range(0, len(encrypted_values), 2):
        encrypted_value = int(encrypted_values[i:i+2])
        decrypted_value = str(encrypted_value + random_number).zfill(2)
        decrypted_char = reverse_encryption_map[decrypted_value]
        decrypted_password.append(decrypted_char)
    return ''.join(decrypted_password)

# Encode and decode functions
def encode_string(s):
    """Encode a string to a numeric format."""
    return ''.join(f'{ord(c):03}' for c in s)

def decode_string(encoded):
    """Decode a numeric format back to a string."""
    return ''.join(chr(int(encoded[i:i+3])) for i in range(0, len(encoded), 3))

# Save the encrypted password to a file
def save_password(website, username, encrypted_password, date_saved, filename='passwords.txt'):
    with open(filename, 'a') as file:
        file.write(f"{website},{username},{encrypted_password},{date_saved}\n")

# Load saved passwords from a file
def load_passwords(filename='passwords.txt'):
    passwords = []
    try:
        with open(filename, 'r') as file:
            lines = file.readlines()
            for line in lines:
                website, username, encrypted_password, date_saved = line.strip().split(',')
                passwords.append((website, username, encrypted_password, date_saved))
    except FileNotFoundError:
        pass
    return passwords

# Set the file to read-only
#def set_read_only(filename):
    #os.chmod(filename, 0o444)  # Read-only

# Calculate the dynamic app password based on the current time
def calculate_dynamic_password():
    now = datetime.datetime.now()
    hours = now.hour
    minutes = now.minute
    value = (hours * 100 + minutes) / 2
    return str(int(value + 1))

# GUI Application
class PasswordManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Manager")

        self.root.geometry("700x500")
        self.root.configure(bg="#f0f0f0")
        self.app_password = calculate_dynamic_password()  # Set dynamic app password
        self.passwords = []  # To store the encrypted passwords internally
        self.create_widgets()
        self.load_saved_passwords()

    def create_widgets(self):
        # Title
        tk.Label(self.root, text="Password Manager", font=("Arial", 16, "bold"), bg="#f0f0f0").pack(pady=10)

        # Main frame
        main_frame = tk.Frame(self.root, bg="#f0f0f0")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Website
        tk.Label(main_frame, text="Website:", bg="#f0f0f0").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        self.website_entry = tk.Entry(main_frame, width=50)
        self.website_entry.grid(row=0, column=1, padx=5, pady=5)

        # Username
        tk.Label(main_frame, text="Username:", bg="#f0f0f0").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        self.username_entry = tk.Entry(main_frame, width=50)
        self.username_entry.grid(row=1, column=1, padx=5, pady=5)

        # Password
        tk.Label(main_frame, text="Password:", bg="#f0f0f0").grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
        self.password_entry = tk.Entry(main_frame, show='*', width=50)
        self.password_entry.grid(row=2, column=1, padx=5, pady=5)

        # Date Saved
        tk.Label(main_frame, text="Date Saved (YYYYMMDD):", bg="#f0f0f0").grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)
        self.date_entry = tk.Entry(main_frame, width=50)
        self.date_entry.grid(row=3, column=1, padx=5, pady=5)

        # Buttons frame
        buttons_frame = tk.Frame(self.root, bg="#f0f0f0")
        buttons_frame.pack(pady=10)

        # Save Button
        tk.Button(buttons_frame, text="Save Password", command=self.prompt_app_password, bg="#4CAF50", fg="white", font=("Arial", 12)).pack(pady=5)

        # Password List frame with scrollbar
        list_frame = tk.Frame(self.root, bg="#f0f0f0")
        list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.password_list = ttk.Treeview(list_frame, columns=('Website', 'Username', 'Date Saved'), show='headings', height=10)
        self.password_list.heading('Website', text='Website')
        self.password_list.heading('Username', text='Username')
        self.password_list.heading('Date Saved', text='Date Saved')
        self.password_list.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # Scrollbars
        scrollbar_y = tk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.password_list.yview)
        scrollbar_y.pack(side=tk.RIGHT, fill=tk.Y)
        self.password_list.configure(yscrollcommand=scrollbar_y.set)

        scrollbar_x = tk.Scrollbar(list_frame, orient=tk.HORIZONTAL, command=self.password_list.xview)
        scrollbar_x.pack(side=tk.BOTTOM, fill=tk.X)
        self.password_list.configure(xscrollcommand=scrollbar_x.set)

        # Show Password Button
        tk.Button(buttons_frame, text="Show Password", command=self.show_password, bg="#2196F3", fg="white", font=("Arial", 12)).pack(pady=5)

    def prompt_app_password(self):
        app_password_input = simpledialog.askstring("App Password", "Enter app password:", show='*')
        dynamic_password = calculate_dynamic_password()
        if app_password_input == dynamic_password:
            self.save_password()
        else:
            messagebox.showerror("Error", "Incorrect app password!")

    def save_password(self):
        website = self.website_entry.get()
        username = self.username_entry.get()
        password = self.password_entry.get()
        date_saved = self.date_entry.get()

        if website and username and password and date_saved:
            random_number = random.randint(1, 9)
            encrypted_password = encrypt_password(password, random_number)
            encoded_website = encode_string(website)
            encoded_username = encode_string(username)
            encoded_date = encode_string(date_saved)
            save_password(encoded_website, encoded_username, encrypted_password, encoded_date)
            messagebox.showinfo("Success", "Password saved successfully!")
            self.clear_entries()
            self.load_saved_passwords()
        else:
            messagebox.showerror("Error", "All fields are required!")

    def show_password(self):
        app_password_input = simpledialog.askstring("App Password", "Enter app password:", show='*')
        dynamic_password = calculate_dynamic_password()
        if app_password_input == dynamic_password:
            selected_item = self.password_list.selection()
            if selected_item:
                item = self.password_list.item(selected_item)
                index = self.password_list.index(selected_item)
                encoded_website, encoded_username, encrypted_password, encoded_date = self.passwords[index]
                website = decode_string(encoded_website)
                username = decode_string(encoded_username)
                date_saved = decode_string(encoded_date)
                decrypted_password = decrypt_password(encrypted_password)
                messagebox.showinfo("Decrypted Password", f"{website} : {username} : {decrypted_password} : {date_saved}")
            else:
                messagebox.showerror("Error", "No password selected!")
        else:
            messagebox.showerror("Error", "Incorrect app password!")

    def load_saved_passwords(self):
        self.passwords = load_passwords()
        for item in self.password_list.get_children():
            self.password_list.delete(item)
        for encoded_website, encoded_username, _, encoded_date in self.passwords:
            website = decode_string(encoded_website)
            username = decode_string(encoded_username)
            date_saved = decode_string(encoded_date)
            self.password_list.insert('', 'end', values=(website, username, date_saved))

    def clear_entries(self):
        self.website_entry.delete(0, tk.END)
        self.username_entry.delete(0, tk.END)
        self.password_entry.delete(0, tk.END)
        self.date_entry.delete(0, tk.END)

if __name__ == "__main__":
    # Ensure the file exists before setting permissions
    if not os.path.exists('passwords.txt'):
        open('passwords.txt', 'w').close()

    # Set the file to read-only
    #set_read_only('passwords.txt')

    root = tk.Tk()
    app = PasswordManager(root)
    root.mainloop()
